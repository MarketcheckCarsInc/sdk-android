/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class PopularityItem {
  
  @SerializedName("text")
  private String text = null;
  @SerializedName("left")
  private BigDecimal left = null;
  @SerializedName("right")
  private BigDecimal right = null;
  @SerializedName("difference")
  private BigDecimal difference = null;
  @SerializedName("thumbs")
  private String thumbs = null;
  @SerializedName("delta_percent")
  private BigDecimal deltaPercent = null;
  @SerializedName("color")
  private String color = null;

  /**
   * Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars
   **/
  @ApiModelProperty(value = "Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }

  /**
   * Left side rating for above description (2016 ford F-150 Lariat)
   **/
  @ApiModelProperty(value = "Left side rating for above description (2016 ford F-150 Lariat)")
  public BigDecimal getLeft() {
    return left;
  }
  public void setLeft(BigDecimal left) {
    this.left = left;
  }

  /**
   * Right side rating for above description (All Other Cars)
   **/
  @ApiModelProperty(value = "Right side rating for above description (All Other Cars)")
  public BigDecimal getRight() {
    return right;
  }
  public void setRight(BigDecimal right) {
    this.right = right;
  }

  /**
   * Difference depending upon left and right analysis
   **/
  @ApiModelProperty(value = "Difference depending upon left and right analysis")
  public BigDecimal getDifference() {
    return difference;
  }
  public void setDifference(BigDecimal difference) {
    this.difference = difference;
  }

  /**
   * Thumbs up/down depending upon left and right analysis numbers
   **/
  @ApiModelProperty(value = "Thumbs up/down depending upon left and right analysis numbers")
  public String getThumbs() {
    return thumbs;
  }
  public void setThumbs(String thumbs) {
    this.thumbs = thumbs;
  }

  /**
   * Delta percent
   **/
  @ApiModelProperty(value = "Delta percent")
  public BigDecimal getDeltaPercent() {
    return deltaPercent;
  }
  public void setDeltaPercent(BigDecimal deltaPercent) {
    this.deltaPercent = deltaPercent;
  }

  /**
   * Color depending upon left and right analysis numbers
   **/
  @ApiModelProperty(value = "Color depending upon left and right analysis numbers")
  public String getColor() {
    return color;
  }
  public void setColor(String color) {
    this.color = color;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PopularityItem popularityItem = (PopularityItem) o;
    return (this.text == null ? popularityItem.text == null : this.text.equals(popularityItem.text)) &&
        (this.left == null ? popularityItem.left == null : this.left.equals(popularityItem.left)) &&
        (this.right == null ? popularityItem.right == null : this.right.equals(popularityItem.right)) &&
        (this.difference == null ? popularityItem.difference == null : this.difference.equals(popularityItem.difference)) &&
        (this.thumbs == null ? popularityItem.thumbs == null : this.thumbs.equals(popularityItem.thumbs)) &&
        (this.deltaPercent == null ? popularityItem.deltaPercent == null : this.deltaPercent.equals(popularityItem.deltaPercent)) &&
        (this.color == null ? popularityItem.color == null : this.color.equals(popularityItem.color));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.text == null ? 0: this.text.hashCode());
    result = 31 * result + (this.left == null ? 0: this.left.hashCode());
    result = 31 * result + (this.right == null ? 0: this.right.hashCode());
    result = 31 * result + (this.difference == null ? 0: this.difference.hashCode());
    result = 31 * result + (this.thumbs == null ? 0: this.thumbs.hashCode());
    result = 31 * result + (this.deltaPercent == null ? 0: this.deltaPercent.hashCode());
    result = 31 * result + (this.color == null ? 0: this.color.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PopularityItem {\n");
    
    sb.append("  text: ").append(text).append("\n");
    sb.append("  left: ").append(left).append("\n");
    sb.append("  right: ").append(right).append("\n");
    sb.append("  difference: ").append(difference).append("\n");
    sb.append("  thumbs: ").append(thumbs).append("\n");
    sb.append("  deltaPercent: ").append(deltaPercent).append("\n");
    sb.append("  color: ").append(color).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
