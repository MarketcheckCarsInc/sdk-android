/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Averages;
import io.swagger.client.model.ComparisonPoint;
import io.swagger.client.model.CompetitorsPoint;
import io.swagger.client.model.DepreciationPoint;
import io.swagger.client.model.Error;
import io.swagger.client.model.Mds;
import io.swagger.client.model.PopularityItem;
import io.swagger.client.model.TrendPoint;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MarketApi {
  String basePath = "https://marketcheck-prod.apigee.net/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * [MOCK] Get Averages for YMM
  * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
   * @param vin VIN as a reference to the type of car for which averages data is to be returned
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @param year Year of the car
   * @param make Make of the car
   * @param model Model of the Car
   * @param trim Trim of the Car
   * @param fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market)
   * @return Averages
  */
  public Averages getAverages (String vin, String apiKey, String year, String make, String model, String trim, String fields) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getAverages",
        new ApiException(400, "Missing the required parameter 'vin' when calling getAverages"));
    }

    // create path and map variables
    String path = "/averages";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "make", make));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "model", model));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trim", trim));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fields", fields));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Averages) ApiInvoker.deserialize(localVarResponse, "", Averages.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * [MOCK] Get Averages for YMM
   * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
   * @param vin VIN as a reference to the type of car for which averages data is to be returned   * @param apiKey The API Authentication Key. Mandatory with all API calls.   * @param year Year of the car   * @param make Make of the car   * @param model Model of the Car   * @param trim Trim of the Car   * @param fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market)
  */
  public void getAverages (String vin, String apiKey, String year, String make, String model, String trim, String fields, final Response.Listener<Averages> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getAverages",
        new ApiException(400, "Missing the required parameter 'vin' when calling getAverages"));
    }

    // create path and map variables
    String path = "/averages".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "make", make));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "model", model));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trim", trim));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fields", fields));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Averages) ApiInvoker.deserialize(localVarResponse,  "", Averages.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Compare market
  * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
   * @param vin VIN as a reference to the type of car for which comparison data is to be returned
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @return ComparisonPoint
  */
  public ComparisonPoint getComparison (String vin, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getComparison",
        new ApiException(400, "Missing the required parameter 'vin' when calling getComparison"));
    }

    // create path and map variables
    String path = "/comparison";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ComparisonPoint) ApiInvoker.deserialize(localVarResponse, "", ComparisonPoint.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Compare market
   * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
   * @param vin VIN as a reference to the type of car for which comparison data is to be returned   * @param apiKey The API Authentication Key. Mandatory with all API calls.
  */
  public void getComparison (String vin, String apiKey, final Response.Listener<ComparisonPoint> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getComparison",
        new ApiException(400, "Missing the required parameter 'vin' when calling getComparison"));
    }

    // create path and map variables
    String path = "/comparison".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ComparisonPoint) ApiInvoker.deserialize(localVarResponse,  "", ComparisonPoint.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Competitors
  * [MOCK] Competitor cars in market for current vin
   * @param vin VIN as a reference to the type of car for which competitors data is to be returned
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @return CompetitorsPoint
  */
  public CompetitorsPoint getCompetition (String vin, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getCompetition",
        new ApiException(400, "Missing the required parameter 'vin' when calling getCompetition"));
    }

    // create path and map variables
    String path = "/competition";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CompetitorsPoint) ApiInvoker.deserialize(localVarResponse, "", CompetitorsPoint.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Competitors
   * [MOCK] Competitor cars in market for current vin
   * @param vin VIN as a reference to the type of car for which competitors data is to be returned   * @param apiKey The API Authentication Key. Mandatory with all API calls.
  */
  public void getCompetition (String vin, String apiKey, final Response.Listener<CompetitorsPoint> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getCompetition",
        new ApiException(400, "Missing the required parameter 'vin' when calling getCompetition"));
    }

    // create path and map variables
    String path = "/competition".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CompetitorsPoint) ApiInvoker.deserialize(localVarResponse,  "", CompetitorsPoint.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Depreciation
  * [MOCK] Model resale value based on depreciation
   * @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @return DepreciationPoint
  */
  public DepreciationPoint getDepreciation (String vin, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getDepreciation",
        new ApiException(400, "Missing the required parameter 'vin' when calling getDepreciation"));
    }

    // create path and map variables
    String path = "/depreciation";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DepreciationPoint) ApiInvoker.deserialize(localVarResponse, "", DepreciationPoint.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Depreciation
   * [MOCK] Model resale value based on depreciation
   * @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned   * @param apiKey The API Authentication Key. Mandatory with all API calls.
  */
  public void getDepreciation (String vin, String apiKey, final Response.Listener<DepreciationPoint> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getDepreciation",
        new ApiException(400, "Missing the required parameter 'vin' when calling getDepreciation"));
    }

    // create path and map variables
    String path = "/depreciation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DepreciationPoint) ApiInvoker.deserialize(localVarResponse,  "", DepreciationPoint.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Market Days Supply
  * Get the basic information on specifications for a car identified by a valid VIN
   * @param vin VIN to decode
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @param exact Exact parameter
   * @param latitude Latitude component of location
   * @param longitude Longitude component of location
   * @param radius Radius around the search location
   * @param debug Debug parameter
   * @param includeSold To fetch sold vins
   * @return Mds
  */
  public Mds getMDS (String vin, String apiKey, String exact, Double latitude, Double longitude, Integer radius, String debug, String includeSold) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getMDS",
        new ApiException(400, "Missing the required parameter 'vin' when calling getMDS"));
    }

    // create path and map variables
    String path = "/mds";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exact", exact));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "radius", radius));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "debug", debug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_sold", includeSold));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Mds) ApiInvoker.deserialize(localVarResponse, "", Mds.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Market Days Supply
   * Get the basic information on specifications for a car identified by a valid VIN
   * @param vin VIN to decode   * @param apiKey The API Authentication Key. Mandatory with all API calls.   * @param exact Exact parameter   * @param latitude Latitude component of location   * @param longitude Longitude component of location   * @param radius Radius around the search location   * @param debug Debug parameter   * @param includeSold To fetch sold vins
  */
  public void getMDS (String vin, String apiKey, String exact, Double latitude, Double longitude, Integer radius, String debug, String includeSold, final Response.Listener<Mds> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getMDS",
        new ApiException(400, "Missing the required parameter 'vin' when calling getMDS"));
    }

    // create path and map variables
    String path = "/mds".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exact", exact));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "radius", radius));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "debug", debug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_sold", includeSold));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Mds) ApiInvoker.deserialize(localVarResponse,  "", Mds.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Popularity
  * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
   * @param year Year of the car
   * @param make Make of the car
   * @param model Model of the Car
   * @param trim Trim of the Car
   * @param bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
   * @return List<PopularityItem>
  */
  public List<PopularityItem> getPopularity (String year, String make, String model, String trim, String bodyType, String apiKey, String stats) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'year' is set
    if (year == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'year' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'year' when calling getPopularity"));
    }
    // verify the required parameter 'make' is set
    if (make == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'make' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'make' when calling getPopularity"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'model' when calling getPopularity"));
    }
    // verify the required parameter 'trim' is set
    if (trim == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'trim' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'trim' when calling getPopularity"));
    }
    // verify the required parameter 'bodyType' is set
    if (bodyType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bodyType' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'bodyType' when calling getPopularity"));
    }

    // create path and map variables
    String path = "/popularity";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "make", make));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "model", model));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trim", trim));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "body_type", bodyType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stats", stats));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PopularityItem>) ApiInvoker.deserialize(localVarResponse, "array", PopularityItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Popularity
   * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
   * @param year Year of the car   * @param make Make of the car   * @param model Model of the Car   * @param trim Trim of the Car   * @param bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call   * @param apiKey The API Authentication Key. Mandatory with all API calls.   * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
  */
  public void getPopularity (String year, String make, String model, String trim, String bodyType, String apiKey, String stats, final Response.Listener<List<PopularityItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'year' is set
    if (year == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'year' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'year' when calling getPopularity"));
    }
    // verify the required parameter 'make' is set
    if (make == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'make' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'make' when calling getPopularity"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'model' when calling getPopularity"));
    }
    // verify the required parameter 'trim' is set
    if (trim == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'trim' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'trim' when calling getPopularity"));
    }
    // verify the required parameter 'bodyType' is set
    if (bodyType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bodyType' when calling getPopularity",
        new ApiException(400, "Missing the required parameter 'bodyType' when calling getPopularity"));
    }

    // create path and map variables
    String path = "/popularity".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "make", make));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "model", model));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trim", trim));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "body_type", bodyType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stats", stats));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PopularityItem>) ApiInvoker.deserialize(localVarResponse,  "array", PopularityItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Trends for criteria
  * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
   * @param vin VIN as a reference to the type of car for which trend data is to be returned
   * @param carType Car type. Allowed values are - new / used / certified
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @param year Year of the car
   * @param make Make of the car
   * @param model Model of the Car
   * @param trim Trim of the Car
   * @return List<TrendPoint>
  */
  public List<TrendPoint> getTrends (String vin, String carType, String apiKey, String year, String make, String model, String trim) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getTrends",
        new ApiException(400, "Missing the required parameter 'vin' when calling getTrends"));
    }
    // verify the required parameter 'carType' is set
    if (carType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'carType' when calling getTrends",
        new ApiException(400, "Missing the required parameter 'carType' when calling getTrends"));
    }

    // create path and map variables
    String path = "/trends";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "car_type", carType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "make", make));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "model", model));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trim", trim));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TrendPoint>) ApiInvoker.deserialize(localVarResponse, "array", TrendPoint.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Trends for criteria
   * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
   * @param vin VIN as a reference to the type of car for which trend data is to be returned   * @param carType Car type. Allowed values are - new / used / certified   * @param apiKey The API Authentication Key. Mandatory with all API calls.   * @param year Year of the car   * @param make Make of the car   * @param model Model of the Car   * @param trim Trim of the Car
  */
  public void getTrends (String vin, String carType, String apiKey, String year, String make, String model, String trim, final Response.Listener<List<TrendPoint>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vin' is set
    if (vin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vin' when calling getTrends",
        new ApiException(400, "Missing the required parameter 'vin' when calling getTrends"));
    }
    // verify the required parameter 'carType' is set
    if (carType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'carType' when calling getTrends",
        new ApiException(400, "Missing the required parameter 'carType' when calling getTrends"));
    }

    // create path and map variables
    String path = "/trends".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vin", vin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "car_type", carType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "make", make));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "model", model));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trim", trim));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TrendPoint>) ApiInvoker.deserialize(localVarResponse,  "array", TrendPoint.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
