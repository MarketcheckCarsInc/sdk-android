/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.BaseListing;
import io.swagger.client.model.Dealer;
import io.swagger.client.model.DealerLandingPage;
import io.swagger.client.model.DealerRating;
import io.swagger.client.model.DealerReview;
import io.swagger.client.model.DealersResponse;
import io.swagger.client.model.Error;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DealerApi {
  String basePath = "https://marketcheck-prod.apigee.net/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Find car dealers around
  * The dealers API returns a list of dealers around a given point and radius. Max radius of only 50 miles is supported.
   * @param latitude Latitude component of location
   * @param longitude Longitude component of location
   * @param radius Radius around the search location
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @param rows Number of results to return. Default is 10. Max is 50
   * @param start Offset for the search results. Default is 1.
   * @return DealersResponse
  */
  public DealersResponse dealerSearch (Double latitude, Double longitude, Integer radius, String apiKey, Integer rows, Integer start) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'latitude' is set
    if (latitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'latitude' when calling dealerSearch",
        new ApiException(400, "Missing the required parameter 'latitude' when calling dealerSearch"));
    }
    // verify the required parameter 'longitude' is set
    if (longitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'longitude' when calling dealerSearch",
        new ApiException(400, "Missing the required parameter 'longitude' when calling dealerSearch"));
    }
    // verify the required parameter 'radius' is set
    if (radius == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'radius' when calling dealerSearch",
        new ApiException(400, "Missing the required parameter 'radius' when calling dealerSearch"));
    }

    // create path and map variables
    String path = "/dealers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "radius", radius));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rows", rows));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DealersResponse) ApiInvoker.deserialize(localVarResponse, "", DealersResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find car dealers around
   * The dealers API returns a list of dealers around a given point and radius. Max radius of only 50 miles is supported.
   * @param latitude Latitude component of location   * @param longitude Longitude component of location   * @param radius Radius around the search location   * @param apiKey The API Authentication Key. Mandatory with all API calls.   * @param rows Number of results to return. Default is 10. Max is 50   * @param start Offset for the search results. Default is 1.
  */
  public void dealerSearch (Double latitude, Double longitude, Integer radius, String apiKey, Integer rows, Integer start, final Response.Listener<DealersResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'latitude' is set
    if (latitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'latitude' when calling dealerSearch",
        new ApiException(400, "Missing the required parameter 'latitude' when calling dealerSearch"));
    }
    // verify the required parameter 'longitude' is set
    if (longitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'longitude' when calling dealerSearch",
        new ApiException(400, "Missing the required parameter 'longitude' when calling dealerSearch"));
    }
    // verify the required parameter 'radius' is set
    if (radius == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'radius' when calling dealerSearch",
        new ApiException(400, "Missing the required parameter 'radius' when calling dealerSearch"));
    }

    // create path and map variables
    String path = "/dealers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "radius", radius));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rows", rows));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealersResponse) ApiInvoker.deserialize(localVarResponse,  "", DealersResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Dealer by id
  * Get a particular dealer&#39;s information by its id
   * @param dealerId Dealer id to get all the dealer info attributes
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @return Dealer
  */
  public Dealer getDealer (String dealerId, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealer",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealer"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}".replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Dealer) ApiInvoker.deserialize(localVarResponse, "", Dealer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Dealer by id
   * Get a particular dealer&#39;s information by its id
   * @param dealerId Dealer id to get all the dealer info attributes   * @param apiKey The API Authentication Key. Mandatory with all API calls.
  */
  public void getDealer (String dealerId, String apiKey, final Response.Listener<Dealer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealer",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealer"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Dealer) ApiInvoker.deserialize(localVarResponse,  "", Dealer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Dealer inventory
  * Get a dealer&#39;s currently active inventory
   * @param dealerId Id representing the dealer to fetch the active inventory for
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @param rows Number of results to return. Default is 10. Max is 50
   * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
   * @return BaseListing
  */
  public BaseListing getDealerActiveInventory (String dealerId, String apiKey, Integer rows, Integer start) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerActiveInventory",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerActiveInventory"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/active/inventory".replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rows", rows));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BaseListing) ApiInvoker.deserialize(localVarResponse, "", BaseListing.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Dealer inventory
   * Get a dealer&#39;s currently active inventory
   * @param dealerId Id representing the dealer to fetch the active inventory for   * @param apiKey The API Authentication Key. Mandatory with all API calls.   * @param rows Number of results to return. Default is 10. Max is 50   * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
  */
  public void getDealerActiveInventory (String dealerId, String apiKey, Integer rows, Integer start, final Response.Listener<BaseListing> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerActiveInventory",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerActiveInventory"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/active/inventory".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rows", rows));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BaseListing) ApiInvoker.deserialize(localVarResponse,  "", BaseListing.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Dealer&#39;s historical inventory
  * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
   * @param dealerId Id representing the dealer to fetch the active inventory for
   * @return BaseListing
  */
  public BaseListing getDealerHistoricalInventory (String dealerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerHistoricalInventory",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerHistoricalInventory"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/historical/inventory".replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BaseListing) ApiInvoker.deserialize(localVarResponse, "", BaseListing.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Dealer&#39;s historical inventory
   * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
   * @param dealerId Id representing the dealer to fetch the active inventory for
  */
  public void getDealerHistoricalInventory (String dealerId, final Response.Listener<BaseListing> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerHistoricalInventory",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerHistoricalInventory"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/historical/inventory".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BaseListing) ApiInvoker.deserialize(localVarResponse,  "", BaseListing.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Experimental: Get cached version of dealer landing page by dealer id
  * Experimental: Get cached version of dealer landing page by dealer id
   * @param dealerId Robot id to get the landing page html for
   * @param apiKey The API Authentication Key. Mandatory with all API calls.
   * @return DealerLandingPage
  */
  public DealerLandingPage getDealerLandingPage (String dealerId, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerLandingPage",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerLandingPage"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/landing".replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DealerLandingPage) ApiInvoker.deserialize(localVarResponse, "", DealerLandingPage.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Experimental: Get cached version of dealer landing page by dealer id
   * Experimental: Get cached version of dealer landing page by dealer id
   * @param dealerId Robot id to get the landing page html for   * @param apiKey The API Authentication Key. Mandatory with all API calls.
  */
  public void getDealerLandingPage (String dealerId, String apiKey, final Response.Listener<DealerLandingPage> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerLandingPage",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerLandingPage"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/landing".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealerLandingPage) ApiInvoker.deserialize(localVarResponse,  "", DealerLandingPage.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Dealer&#39;s Rating
  * [MOCK] Get a dealer&#39;s Rating
   * @param dealerId Id representing the dealer to fetch the ratings for
   * @return DealerRating
  */
  public DealerRating getDealerRatings (String dealerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerRatings",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerRatings"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/ratings".replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DealerRating) ApiInvoker.deserialize(localVarResponse, "", DealerRating.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Dealer&#39;s Rating
   * [MOCK] Get a dealer&#39;s Rating
   * @param dealerId Id representing the dealer to fetch the ratings for
  */
  public void getDealerRatings (String dealerId, final Response.Listener<DealerRating> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerRatings",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerRatings"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/ratings".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealerRating) ApiInvoker.deserialize(localVarResponse,  "", DealerRating.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Dealer&#39;s Review
  * [MOCK] Get a dealer&#39;s Review
   * @param dealerId Id representing the dealer to fetch the ratings for
   * @return DealerReview
  */
  public DealerReview getDealerReviews (String dealerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerReviews",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerReviews"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/reviews".replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DealerReview) ApiInvoker.deserialize(localVarResponse, "", DealerReview.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Dealer&#39;s Review
   * [MOCK] Get a dealer&#39;s Review
   * @param dealerId Id representing the dealer to fetch the ratings for
  */
  public void getDealerReviews (String dealerId, final Response.Listener<DealerReview> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dealerId' is set
    if (dealerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealerId' when calling getDealerReviews",
        new ApiException(400, "Missing the required parameter 'dealerId' when calling getDealerReviews"));
    }

    // create path and map variables
    String path = "/dealer/{dealer_id}/reviews".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dealer_id" + "\\}", apiInvoker.escapeString(dealerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealerReview) ApiInvoker.deserialize(localVarResponse,  "", DealerReview.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
