/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Averages".equalsIgnoreCase(className)) {
      return new TypeToken<List<Averages>>(){}.getType();
    }
    
    if ("BaseListing".equalsIgnoreCase(className)) {
      return new TypeToken<List<BaseListing>>(){}.getType();
    }
    
    if ("Build".equalsIgnoreCase(className)) {
      return new TypeToken<List<Build>>(){}.getType();
    }
    
    if ("ComparisonPoint".equalsIgnoreCase(className)) {
      return new TypeToken<List<ComparisonPoint>>(){}.getType();
    }
    
    if ("CompetitorsCarDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<CompetitorsCarDetails>>(){}.getType();
    }
    
    if ("CompetitorsPoint".equalsIgnoreCase(className)) {
      return new TypeToken<List<CompetitorsPoint>>(){}.getType();
    }
    
    if ("CompetitorsSameCars".equalsIgnoreCase(className)) {
      return new TypeToken<List<CompetitorsSameCars>>(){}.getType();
    }
    
    if ("CompetitorsSimilarCars".equalsIgnoreCase(className)) {
      return new TypeToken<List<CompetitorsSimilarCars>>(){}.getType();
    }
    
    if ("Dealer".equalsIgnoreCase(className)) {
      return new TypeToken<List<Dealer>>(){}.getType();
    }
    
    if ("DealerLandingPage".equalsIgnoreCase(className)) {
      return new TypeToken<List<DealerLandingPage>>(){}.getType();
    }
    
    if ("DealerRating".equalsIgnoreCase(className)) {
      return new TypeToken<List<DealerRating>>(){}.getType();
    }
    
    if ("DealerReview".equalsIgnoreCase(className)) {
      return new TypeToken<List<DealerReview>>(){}.getType();
    }
    
    if ("DealersResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DealersResponse>>(){}.getType();
    }
    
    if ("DepreciationPoint".equalsIgnoreCase(className)) {
      return new TypeToken<List<DepreciationPoint>>(){}.getType();
    }
    
    if ("DepreciationStats".equalsIgnoreCase(className)) {
      return new TypeToken<List<DepreciationStats>>(){}.getType();
    }
    
    if ("Economy".equalsIgnoreCase(className)) {
      return new TypeToken<List<Economy>>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<List<Error>>(){}.getType();
    }
    
    if ("FacetItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<FacetItem>>(){}.getType();
    }
    
    if ("FuelEfficiency".equalsIgnoreCase(className)) {
      return new TypeToken<List<FuelEfficiency>>(){}.getType();
    }
    
    if ("HistoricalListing".equalsIgnoreCase(className)) {
      return new TypeToken<List<HistoricalListing>>(){}.getType();
    }
    
    if ("Listing".equalsIgnoreCase(className)) {
      return new TypeToken<List<Listing>>(){}.getType();
    }
    
    if ("ListingDebugAttributes".equalsIgnoreCase(className)) {
      return new TypeToken<List<ListingDebugAttributes>>(){}.getType();
    }
    
    if ("ListingExtraAttributes".equalsIgnoreCase(className)) {
      return new TypeToken<List<ListingExtraAttributes>>(){}.getType();
    }
    
    if ("ListingMedia".equalsIgnoreCase(className)) {
      return new TypeToken<List<ListingMedia>>(){}.getType();
    }
    
    if ("ListingVDP".equalsIgnoreCase(className)) {
      return new TypeToken<List<ListingVDP>>(){}.getType();
    }
    
    if ("Location".equalsIgnoreCase(className)) {
      return new TypeToken<List<Location>>(){}.getType();
    }
    
    if ("MakeModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<MakeModel>>(){}.getType();
    }
    
    if ("Mds".equalsIgnoreCase(className)) {
      return new TypeToken<List<Mds>>(){}.getType();
    }
    
    if ("PlotPoint".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlotPoint>>(){}.getType();
    }
    
    if ("PopularityItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<PopularityItem>>(){}.getType();
    }
    
    if ("RatingComponents".equalsIgnoreCase(className)) {
      return new TypeToken<List<RatingComponents>>(){}.getType();
    }
    
    if ("ReviewComponents".equalsIgnoreCase(className)) {
      return new TypeToken<List<ReviewComponents>>(){}.getType();
    }
    
    if ("SafetyRating".equalsIgnoreCase(className)) {
      return new TypeToken<List<SafetyRating>>(){}.getType();
    }
    
    if ("SearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponse>>(){}.getType();
    }
    
    if ("TrendPoint".equalsIgnoreCase(className)) {
      return new TypeToken<List<TrendPoint>>(){}.getType();
    }
    
    if ("VinReport".equalsIgnoreCase(className)) {
      return new TypeToken<List<VinReport>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Averages".equalsIgnoreCase(className)) {
      return new TypeToken<Averages>(){}.getType();
    }
    
    if ("BaseListing".equalsIgnoreCase(className)) {
      return new TypeToken<BaseListing>(){}.getType();
    }
    
    if ("Build".equalsIgnoreCase(className)) {
      return new TypeToken<Build>(){}.getType();
    }
    
    if ("ComparisonPoint".equalsIgnoreCase(className)) {
      return new TypeToken<ComparisonPoint>(){}.getType();
    }
    
    if ("CompetitorsCarDetails".equalsIgnoreCase(className)) {
      return new TypeToken<CompetitorsCarDetails>(){}.getType();
    }
    
    if ("CompetitorsPoint".equalsIgnoreCase(className)) {
      return new TypeToken<CompetitorsPoint>(){}.getType();
    }
    
    if ("CompetitorsSameCars".equalsIgnoreCase(className)) {
      return new TypeToken<CompetitorsSameCars>(){}.getType();
    }
    
    if ("CompetitorsSimilarCars".equalsIgnoreCase(className)) {
      return new TypeToken<CompetitorsSimilarCars>(){}.getType();
    }
    
    if ("Dealer".equalsIgnoreCase(className)) {
      return new TypeToken<Dealer>(){}.getType();
    }
    
    if ("DealerLandingPage".equalsIgnoreCase(className)) {
      return new TypeToken<DealerLandingPage>(){}.getType();
    }
    
    if ("DealerRating".equalsIgnoreCase(className)) {
      return new TypeToken<DealerRating>(){}.getType();
    }
    
    if ("DealerReview".equalsIgnoreCase(className)) {
      return new TypeToken<DealerReview>(){}.getType();
    }
    
    if ("DealersResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DealersResponse>(){}.getType();
    }
    
    if ("DepreciationPoint".equalsIgnoreCase(className)) {
      return new TypeToken<DepreciationPoint>(){}.getType();
    }
    
    if ("DepreciationStats".equalsIgnoreCase(className)) {
      return new TypeToken<DepreciationStats>(){}.getType();
    }
    
    if ("Economy".equalsIgnoreCase(className)) {
      return new TypeToken<Economy>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<Error>(){}.getType();
    }
    
    if ("FacetItem".equalsIgnoreCase(className)) {
      return new TypeToken<FacetItem>(){}.getType();
    }
    
    if ("FuelEfficiency".equalsIgnoreCase(className)) {
      return new TypeToken<FuelEfficiency>(){}.getType();
    }
    
    if ("HistoricalListing".equalsIgnoreCase(className)) {
      return new TypeToken<HistoricalListing>(){}.getType();
    }
    
    if ("Listing".equalsIgnoreCase(className)) {
      return new TypeToken<Listing>(){}.getType();
    }
    
    if ("ListingDebugAttributes".equalsIgnoreCase(className)) {
      return new TypeToken<ListingDebugAttributes>(){}.getType();
    }
    
    if ("ListingExtraAttributes".equalsIgnoreCase(className)) {
      return new TypeToken<ListingExtraAttributes>(){}.getType();
    }
    
    if ("ListingMedia".equalsIgnoreCase(className)) {
      return new TypeToken<ListingMedia>(){}.getType();
    }
    
    if ("ListingVDP".equalsIgnoreCase(className)) {
      return new TypeToken<ListingVDP>(){}.getType();
    }
    
    if ("Location".equalsIgnoreCase(className)) {
      return new TypeToken<Location>(){}.getType();
    }
    
    if ("MakeModel".equalsIgnoreCase(className)) {
      return new TypeToken<MakeModel>(){}.getType();
    }
    
    if ("Mds".equalsIgnoreCase(className)) {
      return new TypeToken<Mds>(){}.getType();
    }
    
    if ("PlotPoint".equalsIgnoreCase(className)) {
      return new TypeToken<PlotPoint>(){}.getType();
    }
    
    if ("PopularityItem".equalsIgnoreCase(className)) {
      return new TypeToken<PopularityItem>(){}.getType();
    }
    
    if ("RatingComponents".equalsIgnoreCase(className)) {
      return new TypeToken<RatingComponents>(){}.getType();
    }
    
    if ("ReviewComponents".equalsIgnoreCase(className)) {
      return new TypeToken<ReviewComponents>(){}.getType();
    }
    
    if ("SafetyRating".equalsIgnoreCase(className)) {
      return new TypeToken<SafetyRating>(){}.getType();
    }
    
    if ("SearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponse>(){}.getType();
    }
    
    if ("TrendPoint".equalsIgnoreCase(className)) {
      return new TypeToken<TrendPoint>(){}.getType();
    }
    
    if ("VinReport".equalsIgnoreCase(className)) {
      return new TypeToken<VinReport>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
